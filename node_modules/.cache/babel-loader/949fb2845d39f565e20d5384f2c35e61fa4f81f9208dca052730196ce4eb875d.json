{"ast":null,"code":"// Demo Snake Game - Replace with your team's actual games\nclass SnakeGame {\n  constructor({\n    container,\n    onScoreChange,\n    onGameEnd,\n    username\n  }) {\n    this.container = container;\n    this.onScoreChange = onScoreChange;\n    this.onGameEnd = onGameEnd;\n    this.username = username;\n    this.canvas = null;\n    this.ctx = null;\n    this.gameLoop = null;\n    this.gridSize = 20;\n    this.snake = [{\n      x: 10,\n      y: 10\n    }];\n    this.direction = {\n      x: 0,\n      y: 0\n    };\n    this.food = {\n      x: 15,\n      y: 15\n    };\n    this.score = 0;\n    this.gameRunning = false;\n    this.init();\n  }\n  init() {\n    // Create canvas\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = 600;\n    this.canvas.height = 400;\n    this.canvas.style.border = '2px solid #00ff00';\n    this.canvas.style.background = '#001100';\n    this.canvas.style.display = 'block';\n    this.canvas.style.margin = '0 auto';\n    this.ctx = this.canvas.getContext('2d');\n    this.container.appendChild(this.canvas);\n\n    // Add instructions\n    const instructions = document.createElement('div');\n    instructions.innerHTML = `\n      <div style=\"text-align: center; margin: 20px; color: #00ff00; font-family: Orbitron;\">\n        <h3>SNAKE GAME</h3>\n        <p>Use ARROW KEYS to move • Eat food to grow • Don't hit walls or yourself!</p>\n        <p>Score 100+ points to earn 2 tokens!</p>\n        <button id=\"start-snake\" style=\"\n          background: linear-gradient(45deg, #001100, #003300);\n          border: 2px solid #00ff00;\n          color: #00ff00;\n          padding: 10px 20px;\n          font-family: Orbitron;\n          font-weight: 700;\n          cursor: pointer;\n          border-radius: 4px;\n          margin-top: 10px;\n        \">START GAME</button>\n      </div>\n    `;\n    this.container.appendChild(instructions);\n\n    // Event listeners\n    document.getElementById('start-snake').addEventListener('click', () => {\n      this.startGame();\n    });\n    document.addEventListener('keydown', e => {\n      this.handleKeyPress(e);\n    });\n  }\n  startGame() {\n    this.gameRunning = true;\n    this.gameLoop = setInterval(() => {\n      this.update();\n      this.draw();\n    }, 150);\n  }\n  handleKeyPress(e) {\n    if (!this.gameRunning) return;\n    const key = e.key;\n    if (key === 'ArrowUp' && this.direction.y === 0) {\n      this.direction = {\n        x: 0,\n        y: -1\n      };\n    } else if (key === 'ArrowDown' && this.direction.y === 0) {\n      this.direction = {\n        x: 0,\n        y: 1\n      };\n    } else if (key === 'ArrowLeft' && this.direction.x === 0) {\n      this.direction = {\n        x: -1,\n        y: 0\n      };\n    } else if (key === 'ArrowRight' && this.direction.x === 0) {\n      this.direction = {\n        x: 1,\n        y: 0\n      };\n    }\n  }\n  update() {\n    if (!this.gameRunning) return;\n\n    // Move snake\n    const head = {\n      ...this.snake[0]\n    };\n    head.x += this.direction.x;\n    head.y += this.direction.y;\n\n    // Check wall collision\n    if (head.x < 0 || head.x >= 30 || head.y < 0 || head.y >= 20) {\n      this.endGame();\n      return;\n    }\n\n    // Check self collision\n    for (let segment of this.snake) {\n      if (head.x === segment.x && head.y === segment.y) {\n        this.endGame();\n        return;\n      }\n    }\n    this.snake.unshift(head);\n\n    // Check food collision\n    if (head.x === this.food.x && head.y === this.food.y) {\n      this.score += 10;\n      this.onScoreChange(this.score);\n      this.generateFood();\n    } else {\n      this.snake.pop();\n    }\n  }\n  generateFood() {\n    this.food = {\n      x: Math.floor(Math.random() * 30),\n      y: Math.floor(Math.random() * 20)\n    };\n\n    // Make sure food doesn't spawn on snake\n    for (let segment of this.snake) {\n      if (this.food.x === segment.x && this.food.y === segment.y) {\n        this.generateFood();\n        break;\n      }\n    }\n  }\n  draw() {\n    // Clear canvas\n    this.ctx.fillStyle = '#000000';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw snake\n    this.ctx.fillStyle = '#00ff00';\n    for (let segment of this.snake) {\n      this.ctx.fillRect(segment.x * this.gridSize, segment.y * this.gridSize, this.gridSize - 2, this.gridSize - 2);\n    }\n\n    // Draw food\n    this.ctx.fillStyle = '#ff0000';\n    this.ctx.fillRect(this.food.x * this.gridSize, this.food.y * this.gridSize, this.gridSize - 2, this.gridSize - 2);\n  }\n  endGame() {\n    this.gameRunning = false;\n    clearInterval(this.gameLoop);\n\n    // Calculate tokens earned\n    const tokensEarned = this.score >= 100 ? 2 : this.score >= 50 ? 1 : 0;\n    setTimeout(() => {\n      this.onGameEnd(this.score, tokensEarned);\n    }, 1000);\n  }\n  cleanup() {\n    if (this.gameLoop) {\n      clearInterval(this.gameLoop);\n    }\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}\nexport default SnakeGame;","map":{"version":3,"names":["SnakeGame","constructor","container","onScoreChange","onGameEnd","username","canvas","ctx","gameLoop","gridSize","snake","x","y","direction","food","score","gameRunning","init","document","createElement","width","height","style","border","background","display","margin","getContext","appendChild","instructions","innerHTML","getElementById","addEventListener","startGame","e","handleKeyPress","setInterval","update","draw","key","head","endGame","segment","unshift","generateFood","pop","Math","floor","random","fillStyle","fillRect","clearInterval","tokensEarned","setTimeout","cleanup"],"sources":["C:/Users/tyler/OneDrive/Desktop/GameHub/src/games/snake.js"],"sourcesContent":["// Demo Snake Game - Replace with your team's actual games\nclass SnakeGame {\n  constructor({ container, onScoreChange, onGameEnd, username }) {\n    this.container = container;\n    this.onScoreChange = onScoreChange;\n    this.onGameEnd = onGameEnd;\n    this.username = username;\n    \n    this.canvas = null;\n    this.ctx = null;\n    this.gameLoop = null;\n    \n    this.gridSize = 20;\n    this.snake = [{ x: 10, y: 10 }];\n    this.direction = { x: 0, y: 0 };\n    this.food = { x: 15, y: 15 };\n    this.score = 0;\n    this.gameRunning = false;\n    \n    this.init();\n  }\n\n  init() {\n    // Create canvas\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = 600;\n    this.canvas.height = 400;\n    this.canvas.style.border = '2px solid #00ff00';\n    this.canvas.style.background = '#001100';\n    this.canvas.style.display = 'block';\n    this.canvas.style.margin = '0 auto';\n    \n    this.ctx = this.canvas.getContext('2d');\n    this.container.appendChild(this.canvas);\n    \n    // Add instructions\n    const instructions = document.createElement('div');\n    instructions.innerHTML = `\n      <div style=\"text-align: center; margin: 20px; color: #00ff00; font-family: Orbitron;\">\n        <h3>SNAKE GAME</h3>\n        <p>Use ARROW KEYS to move • Eat food to grow • Don't hit walls or yourself!</p>\n        <p>Score 100+ points to earn 2 tokens!</p>\n        <button id=\"start-snake\" style=\"\n          background: linear-gradient(45deg, #001100, #003300);\n          border: 2px solid #00ff00;\n          color: #00ff00;\n          padding: 10px 20px;\n          font-family: Orbitron;\n          font-weight: 700;\n          cursor: pointer;\n          border-radius: 4px;\n          margin-top: 10px;\n        \">START GAME</button>\n      </div>\n    `;\n    this.container.appendChild(instructions);\n    \n    // Event listeners\n    document.getElementById('start-snake').addEventListener('click', () => {\n      this.startGame();\n    });\n    \n    document.addEventListener('keydown', (e) => {\n      this.handleKeyPress(e);\n    });\n  }\n\n  startGame() {\n    this.gameRunning = true;\n    this.gameLoop = setInterval(() => {\n      this.update();\n      this.draw();\n    }, 150);\n  }\n\n  handleKeyPress(e) {\n    if (!this.gameRunning) return;\n    \n    const key = e.key;\n    if (key === 'ArrowUp' && this.direction.y === 0) {\n      this.direction = { x: 0, y: -1 };\n    } else if (key === 'ArrowDown' && this.direction.y === 0) {\n      this.direction = { x: 0, y: 1 };\n    } else if (key === 'ArrowLeft' && this.direction.x === 0) {\n      this.direction = { x: -1, y: 0 };\n    } else if (key === 'ArrowRight' && this.direction.x === 0) {\n      this.direction = { x: 1, y: 0 };\n    }\n  }\n\n  update() {\n    if (!this.gameRunning) return;\n    \n    // Move snake\n    const head = { ...this.snake[0] };\n    head.x += this.direction.x;\n    head.y += this.direction.y;\n    \n    // Check wall collision\n    if (head.x < 0 || head.x >= 30 || head.y < 0 || head.y >= 20) {\n      this.endGame();\n      return;\n    }\n    \n    // Check self collision\n    for (let segment of this.snake) {\n      if (head.x === segment.x && head.y === segment.y) {\n        this.endGame();\n        return;\n      }\n    }\n    \n    this.snake.unshift(head);\n    \n    // Check food collision\n    if (head.x === this.food.x && head.y === this.food.y) {\n      this.score += 10;\n      this.onScoreChange(this.score);\n      this.generateFood();\n    } else {\n      this.snake.pop();\n    }\n  }\n\n  generateFood() {\n    this.food = {\n      x: Math.floor(Math.random() * 30),\n      y: Math.floor(Math.random() * 20)\n    };\n    \n    // Make sure food doesn't spawn on snake\n    for (let segment of this.snake) {\n      if (this.food.x === segment.x && this.food.y === segment.y) {\n        this.generateFood();\n        break;\n      }\n    }\n  }\n\n  draw() {\n    // Clear canvas\n    this.ctx.fillStyle = '#000000';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw snake\n    this.ctx.fillStyle = '#00ff00';\n    for (let segment of this.snake) {\n      this.ctx.fillRect(\n        segment.x * this.gridSize,\n        segment.y * this.gridSize,\n        this.gridSize - 2,\n        this.gridSize - 2\n      );\n    }\n    \n    // Draw food\n    this.ctx.fillStyle = '#ff0000';\n    this.ctx.fillRect(\n      this.food.x * this.gridSize,\n      this.food.y * this.gridSize,\n      this.gridSize - 2,\n      this.gridSize - 2\n    );\n  }\n\n  endGame() {\n    this.gameRunning = false;\n    clearInterval(this.gameLoop);\n    \n    // Calculate tokens earned\n    const tokensEarned = this.score >= 100 ? 2 : this.score >= 50 ? 1 : 0;\n    \n    setTimeout(() => {\n      this.onGameEnd(this.score, tokensEarned);\n    }, 1000);\n  }\n\n  cleanup() {\n    if (this.gameLoop) {\n      clearInterval(this.gameLoop);\n    }\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}\n\nexport default SnakeGame;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}