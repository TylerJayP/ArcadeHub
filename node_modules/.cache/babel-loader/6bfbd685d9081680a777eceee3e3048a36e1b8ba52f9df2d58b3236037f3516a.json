{"ast":null,"code":"// Rock and Roll Rhythm Game - Integrated for Arcade Hub\nclass RockAndRollGame {\n  constructor({\n    container,\n    onScoreChange,\n    onGameEnd,\n    username\n  }) {\n    this.container = container;\n    this.onScoreChange = onScoreChange;\n    this.onGameEnd = onGameEnd;\n    this.username = username;\n\n    // Canvas and context\n    this.canvas = null;\n    this.ctx = null;\n    this.gameLoop = null;\n\n    // Car properties\n    this.car = {\n      width: 40,\n      height: 50,\n      x: 0,\n      y: 0,\n      speed: 5\n    };\n\n    // Input state\n    this.leftPressed = false;\n    this.rightPressed = false;\n    this.keyPressed = {};\n\n    // Game settings\n    this.lanes = 5;\n    this.laneWidth = 0;\n    this.noteColors = ['#0f0', '#f00', '#ff0', '#00f', '#fa0'];\n    this.keyMap = ['1', '2', '3', '4', '5'];\n    this.defaultBaselineOffset = 100;\n    this.baselineOffset = this.defaultBaselineOffset;\n    this.noteWidth = 0;\n    this.noteHeight = 40;\n    this.obstacleWidth = 40;\n    this.obstacleHeight = 40;\n\n    // Game state\n    this.obstacles = [];\n    this.obstacleTimer = 0;\n    this.score = 0;\n    this.gameOver = false;\n    this.gameStarted = false;\n    this.noteTimer = 0;\n    this.noteSpawnInterval = 30;\n    this.bpm = 120;\n    this.noteFallBeats = 4;\n    this.obstacleSpeed = 4;\n\n    // Audio and patterns\n    this.currentSong = null;\n    this.audio = null;\n    this.notePattern = null;\n    this.patternStartTime = 0;\n    this.lastNoteIndex = 0;\n\n    // Song library\n    this.songLibrary = [{\n      name: \"Beginner Mode\",\n      bpm: 100,\n      file: null\n    }, {\n      name: \"Normal Mode\",\n      bpm: 120,\n      file: null\n    }, {\n      name: \"Hard Mode\",\n      bpm: 150,\n      file: null\n    }, {\n      name: \"Expert Mode\",\n      bpm: 180,\n      file: null\n    }];\n    this.init();\n  }\n  init() {\n    // Create canvas\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = 400;\n    this.canvas.height = 600;\n    this.canvas.style.border = '2px solid #00ff00';\n    this.canvas.style.background = '#000011';\n    this.canvas.style.display = 'block';\n    this.canvas.style.margin = '0 auto';\n    this.ctx = this.canvas.getContext('2d');\n    this.container.appendChild(this.canvas);\n\n    // Calculate lane width and car position\n    this.laneWidth = this.canvas.width / this.lanes;\n    this.noteWidth = this.laneWidth;\n    this.car.x = this.canvas.width / 2 - this.car.width / 2;\n    this.car.y = this.canvas.height - 100;\n    this.calculateObstacleSpeed();\n\n    // Add simple instructions below canvas\n    const instructions = document.createElement('div');\n    instructions.style.cssText = `\n      text-align: center;\n      margin: 20px;\n      color: #00ff00;\n      font-family: 'Orbitron', monospace;\n    `;\n    instructions.innerHTML = `\n      <h3>üé∏ ROCK AND ROLL üé∏</h3>\n      <p>Use ‚Üê ‚Üí arrow keys to steer ‚Ä¢ Use number keys 1-5 to hit rhythm notes!</p>\n      <p>Avoid obstacles and hit the notes perfectly to score big!</p>\n    `;\n    this.container.appendChild(instructions);\n\n    // Setup event listeners\n    this.setupEventListeners();\n  }\n  setupEventListeners() {\n    this.keyDownHandler = e => this.handleKeyDown(e);\n    this.keyUpHandler = e => this.handleKeyUp(e);\n    document.addEventListener('keydown', this.keyDownHandler);\n    document.addEventListener('keyup', this.keyUpHandler);\n  }\n  handleKeyDown(e) {\n    if (e.key === 'ArrowLeft') this.leftPressed = true;\n    if (e.key === 'ArrowRight') this.rightPressed = true;\n    if (this.gameOver && (e.key === 'r' || e.key === 'R')) {\n      this.resetGame();\n      return;\n    }\n\n    // Handle note hits\n    const keyIndex = this.keyMap.indexOf(e.key);\n    if (keyIndex !== -1 && this.gameStarted) {\n      this.hitNote(keyIndex);\n    }\n  }\n  handleKeyUp(e) {\n    if (e.key === 'ArrowLeft') this.leftPressed = false;\n    if (e.key === 'ArrowRight') this.rightPressed = false;\n  }\n  calculateObstacleSpeed() {\n    const beatsPerSecond = this.bpm / 60;\n    const timeSeconds = this.noteFallBeats / beatsPerSecond;\n    const distance = this.canvas.height - this.defaultBaselineOffset;\n    this.obstacleSpeed = distance / (timeSeconds * 60); // 60fps\n  }\n  startGame() {\n    this.gameStarted = true;\n    this.gameOver = false;\n    this.patternStartTime = Date.now();\n    this.lastNoteIndex = 0;\n    this.gameLoop = this.runGameLoop.bind(this);\n    this.gameLoop();\n  }\n  resetGame() {\n    this.obstacles = [];\n    this.obstacleTimer = 0;\n    this.score = 0;\n    this.car.x = this.canvas.width / 2 - this.car.width / 2;\n    this.gameOver = false;\n    this.gameStarted = false;\n    this.notePattern = null;\n    this.lastNoteIndex = 0;\n    this.baselineOffset = this.defaultBaselineOffset;\n    if (this.onScoreChange) {\n      this.onScoreChange(this.score);\n    }\n  }\n  update() {\n    if (this.gameOver || !this.gameStarted) return;\n\n    // Move car\n    if (this.leftPressed && this.car.x > 0) {\n      this.car.x -= this.car.speed;\n    }\n    if (this.rightPressed && this.car.x < this.canvas.width - this.car.width) {\n      this.car.x += this.car.speed;\n    }\n\n    // Spawn obstacles\n    this.obstacleTimer++;\n    if (this.obstacleTimer > this.noteSpawnInterval) {\n      this.spawnObstacles();\n      this.obstacleTimer = 0;\n    }\n\n    // Move obstacles\n    for (let i = 0; i < this.obstacles.length; i++) {\n      this.obstacles[i].y += this.obstacleSpeed;\n    }\n\n    // Remove off-screen obstacles\n    this.obstacles = this.obstacles.filter(ob => ob.y < this.canvas.height && (ob.type !== 'note' || !ob.hit));\n\n    // Check collisions\n    this.checkCollisions();\n\n    // Check missed notes\n    this.checkMissedNotes();\n    if (!this.gameOver) {\n      this.score++;\n      if (this.onScoreChange) {\n        this.onScoreChange(this.score);\n      }\n    }\n  }\n  checkCollisions() {\n    for (let i = 0; i < this.obstacles.length; i++) {\n      const ob = this.obstacles[i];\n      if (ob.type === 'indestructible' && this.checkCollision(this.car, ob)) {\n        this.endGame();\n      }\n      if (ob.type === 'note' && !ob.hit && this.checkCollision(this.car, ob)) {\n        this.endGame();\n      }\n    }\n  }\n  checkMissedNotes() {\n    for (let i = 0; i < this.obstacles.length; i++) {\n      const ob = this.obstacles[i];\n      if (ob.type === 'note' && !ob.hit && ob.y > this.car.y - this.baselineOffset + this.noteHeight / 2) {\n        ob.hit = true;\n        this.baselineOffset -= 10;\n        if (this.baselineOffset < 0) this.baselineOffset = 0;\n        this.calculateObstacleSpeed();\n      }\n    }\n  }\n  checkCollision(rect1, rect2) {\n    return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;\n  }\n  hitNote(keyIndex) {\n    for (let i = 0; i < this.obstacles.length; i++) {\n      const ob = this.obstacles[i];\n      if (ob.type === 'note' && ob.lane === keyIndex && !ob.hit && Math.abs(ob.y + ob.height / 2 - (this.car.y - this.baselineOffset + this.noteHeight / 2)) < 30) {\n        ob.hit = true;\n        this.score += 50;\n        if (this.onScoreChange) {\n          this.onScoreChange(this.score);\n        }\n        break;\n      }\n    }\n  }\n  spawnObstacles() {\n    // Create random obstacles and notes\n    if (Math.random() < 0.3) {\n      // Spawn a note\n      const lane = Math.floor(Math.random() * this.lanes);\n      this.obstacles.push({\n        x: lane * this.laneWidth,\n        y: -this.noteHeight,\n        width: this.noteWidth,\n        height: this.noteHeight,\n        color: this.noteColors[lane],\n        type: 'note',\n        lane: lane,\n        hit: false\n      });\n    }\n    if (Math.random() < 0.2) {\n      // Spawn an indestructible obstacle\n      const lane = Math.floor(Math.random() * this.lanes);\n      this.obstacles.push({\n        x: lane * this.laneWidth + (this.laneWidth - this.obstacleWidth) / 2,\n        y: -this.obstacleHeight,\n        width: this.obstacleWidth,\n        height: this.obstacleHeight,\n        color: '#666',\n        type: 'indestructible'\n      });\n    }\n  }\n  draw() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw lane dividers\n    this.ctx.strokeStyle = '#333';\n    this.ctx.lineWidth = 1;\n    for (let i = 1; i < this.lanes; i++) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(i * this.laneWidth, 0);\n      this.ctx.lineTo(i * this.laneWidth, this.canvas.height);\n      this.ctx.stroke();\n    }\n    this.drawCar();\n    this.drawBaseline();\n    this.obstacles.forEach(ob => this.drawObstacle(ob));\n\n    // Draw score\n    this.ctx.fillStyle = '#00ff00';\n    this.ctx.font = '20px Orbitron';\n    this.ctx.fillText('Score: ' + this.score, 10, 30);\n\n    // Draw game over\n    if (this.gameOver) {\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n      this.ctx.fillStyle = '#ff0000';\n      this.ctx.font = '40px Orbitron';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('GAME OVER', this.canvas.width / 2, this.canvas.height / 2 - 40);\n      this.ctx.fillStyle = '#00ff00';\n      this.ctx.font = '20px Orbitron';\n      this.ctx.fillText('Final Score: ' + this.score, this.canvas.width / 2, this.canvas.height / 2);\n      this.ctx.fillText('Press R to Restart', this.canvas.width / 2, this.canvas.height / 2 + 40);\n      this.ctx.textAlign = 'start';\n    }\n  }\n  drawCar() {\n    this.ctx.fillStyle = '#0f0';\n    this.ctx.fillRect(this.car.x, this.car.y, this.car.width, this.car.height);\n\n    // Add some car details\n    this.ctx.fillStyle = '#fff';\n    this.ctx.fillRect(this.car.x + 5, this.car.y + 5, 30, 10);\n    this.ctx.fillRect(this.car.x + 5, this.car.y + 35, 30, 10);\n  }\n  drawBaseline() {\n    this.ctx.strokeStyle = '#fff';\n    this.ctx.lineWidth = 3;\n    this.ctx.beginPath();\n    this.ctx.moveTo(-25, this.car.y - this.baselineOffset + this.noteHeight / 2);\n    this.ctx.lineTo(this.canvas.width + 25, this.car.y - this.baselineOffset + this.noteHeight / 2);\n    this.ctx.stroke();\n  }\n  drawObstacle(obstacle) {\n    this.ctx.fillStyle = obstacle.color;\n    this.ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\n    if (obstacle.type === 'note') {\n      this.ctx.strokeStyle = '#fff';\n      this.ctx.lineWidth = 2;\n      this.ctx.strokeRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\n\n      // Add note number\n      this.ctx.fillStyle = '#fff';\n      this.ctx.font = '16px Orbitron';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText((obstacle.lane + 1).toString(), obstacle.x + obstacle.width / 2, obstacle.y + obstacle.height / 2 + 6);\n      this.ctx.textAlign = 'start';\n    }\n  }\n  runGameLoop() {\n    this.update();\n    this.draw();\n    if (!this.gameOver && this.gameStarted) {\n      requestAnimationFrame(this.gameLoop);\n    } else if (this.gameOver) {\n      // Calculate tokens earned based on score\n      let tokensEarned = 0;\n      if (this.score >= 1000) tokensEarned = 3;else if (this.score >= 500) tokensEarned = 2;else if (this.score >= 200) tokensEarned = 1;\n      setTimeout(() => {\n        if (this.onGameEnd) {\n          this.onGameEnd(this.score, tokensEarned);\n        }\n      }, 3000);\n    }\n  }\n  endGame() {\n    this.gameOver = true;\n  }\n  start() {\n    // Start the game immediately when called by GamePlayer\n    this.currentSong = this.songLibrary[1]; // Default to Normal Mode\n    this.bpm = this.currentSong.bpm;\n    this.calculateObstacleSpeed();\n    this.startGame();\n  }\n  cleanup() {\n    // Remove event listeners\n    if (this.keyDownHandler) {\n      document.removeEventListener('keydown', this.keyDownHandler);\n    }\n    if (this.keyUpHandler) {\n      document.removeEventListener('keyup', this.keyUpHandler);\n    }\n\n    // Stop any audio\n    if (this.audio) {\n      this.audio.pause();\n      this.audio = null;\n    }\n\n    // Clear the game loop\n    if (this.gameLoop) {\n      this.gameLoop = null;\n    }\n\n    // Clear container\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}\nexport default RockAndRollGame;","map":{"version":3,"names":["RockAndRollGame","constructor","container","onScoreChange","onGameEnd","username","canvas","ctx","gameLoop","car","width","height","x","y","speed","leftPressed","rightPressed","keyPressed","lanes","laneWidth","noteColors","keyMap","defaultBaselineOffset","baselineOffset","noteWidth","noteHeight","obstacleWidth","obstacleHeight","obstacles","obstacleTimer","score","gameOver","gameStarted","noteTimer","noteSpawnInterval","bpm","noteFallBeats","obstacleSpeed","currentSong","audio","notePattern","patternStartTime","lastNoteIndex","songLibrary","name","file","init","document","createElement","style","border","background","display","margin","getContext","appendChild","calculateObstacleSpeed","instructions","cssText","innerHTML","setupEventListeners","keyDownHandler","e","handleKeyDown","keyUpHandler","handleKeyUp","addEventListener","key","resetGame","keyIndex","indexOf","hitNote","beatsPerSecond","timeSeconds","distance","startGame","Date","now","runGameLoop","bind","update","spawnObstacles","i","length","filter","ob","type","hit","checkCollisions","checkMissedNotes","checkCollision","endGame","rect1","rect2","lane","Math","abs","random","floor","push","color","draw","clearRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","drawCar","drawBaseline","forEach","drawObstacle","fillStyle","font","fillText","fillRect","textAlign","obstacle","strokeRect","toString","requestAnimationFrame","tokensEarned","setTimeout","start","cleanup","removeEventListener","pause"],"sources":["C:/Users/tyler/OneDrive/Desktop/GameHub/src/games/rockandroll.js"],"sourcesContent":["// Rock and Roll Rhythm Game - Integrated for Arcade Hub\r\nclass RockAndRollGame {\r\n  constructor({ container, onScoreChange, onGameEnd, username }) {\r\n    this.container = container;\r\n    this.onScoreChange = onScoreChange;\r\n    this.onGameEnd = onGameEnd;\r\n    this.username = username;\r\n    \r\n    // Canvas and context\r\n    this.canvas = null;\r\n    this.ctx = null;\r\n    this.gameLoop = null;\r\n    \r\n    // Car properties\r\n    this.car = {\r\n      width: 40,\r\n      height: 50,\r\n      x: 0,\r\n      y: 0,\r\n      speed: 5\r\n    };\r\n    \r\n    // Input state\r\n    this.leftPressed = false;\r\n    this.rightPressed = false;\r\n    this.keyPressed = {};\r\n    \r\n    // Game settings\r\n    this.lanes = 5;\r\n    this.laneWidth = 0;\r\n    this.noteColors = ['#0f0', '#f00', '#ff0', '#00f', '#fa0'];\r\n    this.keyMap = ['1', '2', '3', '4', '5'];\r\n    this.defaultBaselineOffset = 100;\r\n    this.baselineOffset = this.defaultBaselineOffset;\r\n    this.noteWidth = 0;\r\n    this.noteHeight = 40;\r\n    this.obstacleWidth = 40;\r\n    this.obstacleHeight = 40;\r\n    \r\n    // Game state\r\n    this.obstacles = [];\r\n    this.obstacleTimer = 0;\r\n    this.score = 0;\r\n    this.gameOver = false;\r\n    this.gameStarted = false;\r\n    this.noteTimer = 0;\r\n    this.noteSpawnInterval = 30;\r\n    this.bpm = 120;\r\n    this.noteFallBeats = 4;\r\n    this.obstacleSpeed = 4;\r\n    \r\n    // Audio and patterns\r\n    this.currentSong = null;\r\n    this.audio = null;\r\n    this.notePattern = null;\r\n    this.patternStartTime = 0;\r\n    this.lastNoteIndex = 0;\r\n    \r\n    // Song library\r\n    this.songLibrary = [\r\n      { name: \"Beginner Mode\", bpm: 100, file: null },\r\n      { name: \"Normal Mode\", bpm: 120, file: null },\r\n      { name: \"Hard Mode\", bpm: 150, file: null },\r\n      { name: \"Expert Mode\", bpm: 180, file: null }\r\n    ];\r\n    \r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    // Create canvas\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.width = 400;\r\n    this.canvas.height = 600;\r\n    this.canvas.style.border = '2px solid #00ff00';\r\n    this.canvas.style.background = '#000011';\r\n    this.canvas.style.display = 'block';\r\n    this.canvas.style.margin = '0 auto';\r\n    \r\n    this.ctx = this.canvas.getContext('2d');\r\n    this.container.appendChild(this.canvas);\r\n    \r\n    // Calculate lane width and car position\r\n    this.laneWidth = this.canvas.width / this.lanes;\r\n    this.noteWidth = this.laneWidth;\r\n    this.car.x = this.canvas.width / 2 - this.car.width / 2;\r\n    this.car.y = this.canvas.height - 100;\r\n    \r\n    this.calculateObstacleSpeed();\r\n    \r\n    // Add simple instructions below canvas\r\n    const instructions = document.createElement('div');\r\n    instructions.style.cssText = `\r\n      text-align: center;\r\n      margin: 20px;\r\n      color: #00ff00;\r\n      font-family: 'Orbitron', monospace;\r\n    `;\r\n    \r\n    instructions.innerHTML = `\r\n      <h3>üé∏ ROCK AND ROLL üé∏</h3>\r\n      <p>Use ‚Üê ‚Üí arrow keys to steer ‚Ä¢ Use number keys 1-5 to hit rhythm notes!</p>\r\n      <p>Avoid obstacles and hit the notes perfectly to score big!</p>\r\n    `;\r\n    \r\n    this.container.appendChild(instructions);\r\n    \r\n    // Setup event listeners\r\n    this.setupEventListeners();\r\n  }\r\n\r\n  setupEventListeners() {\r\n    this.keyDownHandler = (e) => this.handleKeyDown(e);\r\n    this.keyUpHandler = (e) => this.handleKeyUp(e);\r\n    \r\n    document.addEventListener('keydown', this.keyDownHandler);\r\n    document.addEventListener('keyup', this.keyUpHandler);\r\n  }\r\n\r\n  handleKeyDown(e) {\r\n    if (e.key === 'ArrowLeft') this.leftPressed = true;\r\n    if (e.key === 'ArrowRight') this.rightPressed = true;\r\n    \r\n    if (this.gameOver && (e.key === 'r' || e.key === 'R')) {\r\n      this.resetGame();\r\n      return;\r\n    }\r\n    \r\n    // Handle note hits\r\n    const keyIndex = this.keyMap.indexOf(e.key);\r\n    if (keyIndex !== -1 && this.gameStarted) {\r\n      this.hitNote(keyIndex);\r\n    }\r\n  }\r\n\r\n  handleKeyUp(e) {\r\n    if (e.key === 'ArrowLeft') this.leftPressed = false;\r\n    if (e.key === 'ArrowRight') this.rightPressed = false;\r\n  }\r\n\r\n  calculateObstacleSpeed() {\r\n    const beatsPerSecond = this.bpm / 60;\r\n    const timeSeconds = this.noteFallBeats / beatsPerSecond;\r\n    const distance = this.canvas.height - this.defaultBaselineOffset;\r\n    this.obstacleSpeed = distance / (timeSeconds * 60); // 60fps\r\n  }\r\n\r\n  startGame() {\r\n    this.gameStarted = true;\r\n    this.gameOver = false;\r\n    this.patternStartTime = Date.now();\r\n    this.lastNoteIndex = 0;\r\n    \r\n    this.gameLoop = this.runGameLoop.bind(this);\r\n    this.gameLoop();\r\n  }\r\n\r\n  resetGame() {\r\n    this.obstacles = [];\r\n    this.obstacleTimer = 0;\r\n    this.score = 0;\r\n    this.car.x = this.canvas.width / 2 - this.car.width / 2;\r\n    this.gameOver = false;\r\n    this.gameStarted = false;\r\n    this.notePattern = null;\r\n    this.lastNoteIndex = 0;\r\n    this.baselineOffset = this.defaultBaselineOffset;\r\n    \r\n    if (this.onScoreChange) {\r\n      this.onScoreChange(this.score);\r\n    }\r\n  }\r\n\r\n  update() {\r\n    if (this.gameOver || !this.gameStarted) return;\r\n    \r\n    // Move car\r\n    if (this.leftPressed && this.car.x > 0) {\r\n      this.car.x -= this.car.speed;\r\n    }\r\n    if (this.rightPressed && this.car.x < this.canvas.width - this.car.width) {\r\n      this.car.x += this.car.speed;\r\n    }\r\n    \r\n    // Spawn obstacles\r\n    this.obstacleTimer++;\r\n    if (this.obstacleTimer > this.noteSpawnInterval) {\r\n      this.spawnObstacles();\r\n      this.obstacleTimer = 0;\r\n    }\r\n    \r\n    // Move obstacles\r\n    for (let i = 0; i < this.obstacles.length; i++) {\r\n      this.obstacles[i].y += this.obstacleSpeed;\r\n    }\r\n    \r\n    // Remove off-screen obstacles\r\n    this.obstacles = this.obstacles.filter(ob => \r\n      ob.y < this.canvas.height && (ob.type !== 'note' || !ob.hit)\r\n    );\r\n    \r\n    // Check collisions\r\n    this.checkCollisions();\r\n    \r\n    // Check missed notes\r\n    this.checkMissedNotes();\r\n    \r\n    if (!this.gameOver) {\r\n      this.score++;\r\n      if (this.onScoreChange) {\r\n        this.onScoreChange(this.score);\r\n      }\r\n    }\r\n  }\r\n\r\n  checkCollisions() {\r\n    for (let i = 0; i < this.obstacles.length; i++) {\r\n      const ob = this.obstacles[i];\r\n      if (ob.type === 'indestructible' && this.checkCollision(this.car, ob)) {\r\n        this.endGame();\r\n      }\r\n      if (ob.type === 'note' && !ob.hit && this.checkCollision(this.car, ob)) {\r\n        this.endGame();\r\n      }\r\n    }\r\n  }\r\n\r\n  checkMissedNotes() {\r\n    for (let i = 0; i < this.obstacles.length; i++) {\r\n      const ob = this.obstacles[i];\r\n      if (ob.type === 'note' && !ob.hit && \r\n          ob.y > (this.car.y - this.baselineOffset + this.noteHeight / 2)) {\r\n        ob.hit = true;\r\n        this.baselineOffset -= 10;\r\n        if (this.baselineOffset < 0) this.baselineOffset = 0;\r\n        this.calculateObstacleSpeed();\r\n      }\r\n    }\r\n  }\r\n\r\n  checkCollision(rect1, rect2) {\r\n    return (\r\n      rect1.x < rect2.x + rect2.width &&\r\n      rect1.x + rect1.width > rect2.x &&\r\n      rect1.y < rect2.y + rect2.height &&\r\n      rect1.y + rect1.height > rect2.y\r\n    );\r\n  }\r\n\r\n  hitNote(keyIndex) {\r\n    for (let i = 0; i < this.obstacles.length; i++) {\r\n      const ob = this.obstacles[i];\r\n      if (ob.type === 'note' && ob.lane === keyIndex && !ob.hit &&\r\n          Math.abs((ob.y + ob.height / 2) - (this.car.y - this.baselineOffset + this.noteHeight / 2)) < 30) {\r\n        ob.hit = true;\r\n        this.score += 50;\r\n        if (this.onScoreChange) {\r\n          this.onScoreChange(this.score);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  spawnObstacles() {\r\n    // Create random obstacles and notes\r\n    if (Math.random() < 0.3) {\r\n      // Spawn a note\r\n      const lane = Math.floor(Math.random() * this.lanes);\r\n      this.obstacles.push({\r\n        x: lane * this.laneWidth,\r\n        y: -this.noteHeight,\r\n        width: this.noteWidth,\r\n        height: this.noteHeight,\r\n        color: this.noteColors[lane],\r\n        type: 'note',\r\n        lane: lane,\r\n        hit: false\r\n      });\r\n    }\r\n    \r\n    if (Math.random() < 0.2) {\r\n      // Spawn an indestructible obstacle\r\n      const lane = Math.floor(Math.random() * this.lanes);\r\n      this.obstacles.push({\r\n        x: lane * this.laneWidth + (this.laneWidth - this.obstacleWidth) / 2,\r\n        y: -this.obstacleHeight,\r\n        width: this.obstacleWidth,\r\n        height: this.obstacleHeight,\r\n        color: '#666',\r\n        type: 'indestructible'\r\n      });\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    \r\n    // Draw lane dividers\r\n    this.ctx.strokeStyle = '#333';\r\n    this.ctx.lineWidth = 1;\r\n    for (let i = 1; i < this.lanes; i++) {\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(i * this.laneWidth, 0);\r\n      this.ctx.lineTo(i * this.laneWidth, this.canvas.height);\r\n      this.ctx.stroke();\r\n    }\r\n    \r\n    this.drawCar();\r\n    this.drawBaseline();\r\n    this.obstacles.forEach(ob => this.drawObstacle(ob));\r\n    \r\n    // Draw score\r\n    this.ctx.fillStyle = '#00ff00';\r\n    this.ctx.font = '20px Orbitron';\r\n    this.ctx.fillText('Score: ' + this.score, 10, 30);\r\n    \r\n    // Draw game over\r\n    if (this.gameOver) {\r\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\r\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n      \r\n      this.ctx.fillStyle = '#ff0000';\r\n      this.ctx.font = '40px Orbitron';\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.fillText('GAME OVER', this.canvas.width / 2, this.canvas.height / 2 - 40);\r\n      \r\n      this.ctx.fillStyle = '#00ff00';\r\n      this.ctx.font = '20px Orbitron';\r\n      this.ctx.fillText('Final Score: ' + this.score, this.canvas.width / 2, this.canvas.height / 2);\r\n      this.ctx.fillText('Press R to Restart', this.canvas.width / 2, this.canvas.height / 2 + 40);\r\n      this.ctx.textAlign = 'start';\r\n    }\r\n  }\r\n\r\n  drawCar() {\r\n    this.ctx.fillStyle = '#0f0';\r\n    this.ctx.fillRect(this.car.x, this.car.y, this.car.width, this.car.height);\r\n    \r\n    // Add some car details\r\n    this.ctx.fillStyle = '#fff';\r\n    this.ctx.fillRect(this.car.x + 5, this.car.y + 5, 30, 10);\r\n    this.ctx.fillRect(this.car.x + 5, this.car.y + 35, 30, 10);\r\n  }\r\n\r\n  drawBaseline() {\r\n    this.ctx.strokeStyle = '#fff';\r\n    this.ctx.lineWidth = 3;\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(-25, this.car.y - this.baselineOffset + this.noteHeight / 2);\r\n    this.ctx.lineTo(this.canvas.width + 25, this.car.y - this.baselineOffset + this.noteHeight / 2);\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  drawObstacle(obstacle) {\r\n    this.ctx.fillStyle = obstacle.color;\r\n    this.ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\r\n    \r\n    if (obstacle.type === 'note') {\r\n      this.ctx.strokeStyle = '#fff';\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.strokeRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);\r\n      \r\n      // Add note number\r\n      this.ctx.fillStyle = '#fff';\r\n      this.ctx.font = '16px Orbitron';\r\n      this.ctx.textAlign = 'center';\r\n      this.ctx.fillText(\r\n        (obstacle.lane + 1).toString(),\r\n        obstacle.x + obstacle.width / 2,\r\n        obstacle.y + obstacle.height / 2 + 6\r\n      );\r\n      this.ctx.textAlign = 'start';\r\n    }\r\n  }\r\n\r\n  runGameLoop() {\r\n    this.update();\r\n    this.draw();\r\n    \r\n    if (!this.gameOver && this.gameStarted) {\r\n      requestAnimationFrame(this.gameLoop);\r\n    } else if (this.gameOver) {\r\n      // Calculate tokens earned based on score\r\n      let tokensEarned = 0;\r\n      if (this.score >= 1000) tokensEarned = 3;\r\n      else if (this.score >= 500) tokensEarned = 2;\r\n      else if (this.score >= 200) tokensEarned = 1;\r\n      \r\n      setTimeout(() => {\r\n        if (this.onGameEnd) {\r\n          this.onGameEnd(this.score, tokensEarned);\r\n        }\r\n      }, 3000);\r\n    }\r\n  }\r\n\r\n  endGame() {\r\n    this.gameOver = true;\r\n  }\r\n\r\n  start() {\r\n    // Start the game immediately when called by GamePlayer\r\n    this.currentSong = this.songLibrary[1]; // Default to Normal Mode\r\n    this.bpm = this.currentSong.bpm;\r\n    this.calculateObstacleSpeed();\r\n    this.startGame();\r\n  }\r\n\r\n  cleanup() {\r\n    // Remove event listeners\r\n    if (this.keyDownHandler) {\r\n      document.removeEventListener('keydown', this.keyDownHandler);\r\n    }\r\n    if (this.keyUpHandler) {\r\n      document.removeEventListener('keyup', this.keyUpHandler);\r\n    }\r\n    \r\n    // Stop any audio\r\n    if (this.audio) {\r\n      this.audio.pause();\r\n      this.audio = null;\r\n    }\r\n    \r\n    // Clear the game loop\r\n    if (this.gameLoop) {\r\n      this.gameLoop = null;\r\n    }\r\n    \r\n    // Clear container\r\n    if (this.container) {\r\n      this.container.innerHTML = '';\r\n    }\r\n  }\r\n}\r\n\r\nexport default RockAndRollGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}