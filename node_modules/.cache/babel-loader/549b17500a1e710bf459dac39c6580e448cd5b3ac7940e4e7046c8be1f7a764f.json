{"ast":null,"code":"// Fixed Snake Game - No Double Screen Issue\nclass SnakeGame {\n  constructor({\n    container,\n    onScoreChange,\n    onGameEnd,\n    username\n  }) {\n    this.container = container;\n    this.onScoreChange = onScoreChange;\n    this.onGameEnd = onGameEnd;\n    this.username = username;\n    this.canvas = null;\n    this.ctx = null;\n    this.gameLoop = null;\n    this.gridSize = 20;\n    this.snake = [{\n      x: 10,\n      y: 10\n    }];\n    this.direction = {\n      x: 0,\n      y: 0\n    };\n    this.food = {\n      x: 15,\n      y: 15\n    };\n    this.score = 0;\n    this.gameRunning = false;\n    this.init();\n  }\n  init() {\n    // Create canvas\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = 600;\n    this.canvas.height = 400;\n    this.canvas.style.border = '2px solid #00ff00';\n    this.canvas.style.background = '#001100';\n    this.canvas.style.display = 'block';\n    this.canvas.style.margin = '0 auto';\n    this.ctx = this.canvas.getContext('2d');\n    this.container.appendChild(this.canvas);\n\n    // Add simple instructions below canvas\n    const instructions = document.createElement('div');\n    instructions.innerHTML = `\n      <div style=\"text-align: center; margin: 20px; color: #00ff00; font-family: Orbitron;\">\n        <h3>üêç RETRO SNAKE üêç</h3>\n        <p>Use ARROW KEYS to move ‚Ä¢ Eat food to grow ‚Ä¢ Don't hit walls or yourself!</p>\n        <p>Score 100+ points to earn 2 tokens!</p>\n      </div>\n    `;\n    this.container.appendChild(instructions);\n\n    // Set up event listeners\n    this.keyHandler = e => this.handleKeyPress(e);\n    document.addEventListener('keydown', this.keyHandler);\n    this.generateFood();\n  }\n  start() {\n    // Start the game immediately when called by GamePlayer\n    this.gameRunning = true;\n    this.gameLoop = this.runGame.bind(this);\n    this.gameLoop();\n  }\n  handleKeyPress(e) {\n    if (!this.gameRunning) return;\n    if (e.key === 'ArrowUp' && this.direction.y === 0) {\n      this.direction = {\n        x: 0,\n        y: -1\n      };\n    } else if (e.key === 'ArrowDown' && this.direction.y === 0) {\n      this.direction = {\n        x: 0,\n        y: 1\n      };\n    } else if (e.key === 'ArrowLeft' && this.direction.x === 0) {\n      this.direction = {\n        x: -1,\n        y: 0\n      };\n    } else if (e.key === 'ArrowRight' && this.direction.x === 0) {\n      this.direction = {\n        x: 1,\n        y: 0\n      };\n    }\n  }\n  update() {\n    if (!this.gameRunning) return;\n\n    // Move snake head\n    const head = {\n      ...this.snake[0]\n    };\n    head.x += this.direction.x;\n    head.y += this.direction.y;\n\n    // Check wall collision\n    if (head.x < 0 || head.x >= this.canvas.width / this.gridSize || head.y < 0 || head.y >= this.canvas.height / this.gridSize) {\n      this.endGame();\n      return;\n    }\n\n    // Check self collision\n    if (this.snake.some(segment => segment.x === head.x && segment.y === head.y)) {\n      this.endGame();\n      return;\n    }\n    this.snake.unshift(head);\n\n    // Check food collision\n    if (head.x === this.food.x && head.y === this.food.y) {\n      this.score += 10;\n      if (this.onScoreChange) {\n        this.onScoreChange(this.score);\n      }\n      this.generateFood();\n    } else {\n      this.snake.pop();\n    }\n  }\n  generateFood() {\n    do {\n      this.food = {\n        x: Math.floor(Math.random() * (this.canvas.width / this.gridSize)),\n        y: Math.floor(Math.random() * (this.canvas.height / this.gridSize))\n      };\n    } while (this.snake.some(segment => segment.x === this.food.x && segment.y === this.food.y));\n  }\n  draw() {\n    // Clear canvas\n    this.ctx.fillStyle = '#001100';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    // Draw snake\n    this.ctx.fillStyle = '#00ff00';\n    this.snake.forEach((segment, index) => {\n      if (index === 0) {\n        // Snake head - brighter\n        this.ctx.fillStyle = '#00ff88';\n      } else {\n        this.ctx.fillStyle = '#00cc00';\n      }\n      this.ctx.fillRect(segment.x * this.gridSize, segment.y * this.gridSize, this.gridSize - 2, this.gridSize - 2);\n    });\n\n    // Draw food\n    this.ctx.fillStyle = '#ff0000';\n    this.ctx.fillRect(this.food.x * this.gridSize, this.food.y * this.gridSize, this.gridSize - 2, this.gridSize - 2);\n\n    // Draw score\n    this.ctx.fillStyle = '#ffffff';\n    this.ctx.font = '20px Orbitron';\n    this.ctx.fillText('Score: ' + this.score, 10, 30);\n\n    // Draw game over screen\n    if (!this.gameRunning) {\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n      this.ctx.fillStyle = '#ff0000';\n      this.ctx.font = '40px Orbitron';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('GAME OVER', this.canvas.width / 2, this.canvas.height / 2 - 40);\n      this.ctx.fillStyle = '#00ff00';\n      this.ctx.font = '20px Orbitron';\n      this.ctx.fillText('Final Score: ' + this.score, this.canvas.width / 2, this.canvas.height / 2);\n      this.ctx.textAlign = 'start';\n    }\n  }\n  runGame() {\n    this.update();\n    this.draw();\n    if (this.gameRunning) {\n      setTimeout(() => {\n        this.gameLoop();\n      }, 150); // Game speed\n    }\n  }\n  endGame() {\n    this.gameRunning = false;\n\n    // Calculate tokens earned\n    let tokensEarned = 0;\n    if (this.score >= 100) tokensEarned = 2;else if (this.score >= 50) tokensEarned = 1;\n    setTimeout(() => {\n      if (this.onGameEnd) {\n        this.onGameEnd(this.score, tokensEarned);\n      }\n    }, 3000);\n  }\n  cleanup() {\n    this.gameRunning = false;\n\n    // Remove event listener\n    if (this.keyHandler) {\n      document.removeEventListener('keydown', this.keyHandler);\n    }\n\n    // Clear container\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}\nexport default SnakeGame;","map":{"version":3,"names":["SnakeGame","constructor","container","onScoreChange","onGameEnd","username","canvas","ctx","gameLoop","gridSize","snake","x","y","direction","food","score","gameRunning","init","document","createElement","width","height","style","border","background","display","margin","getContext","appendChild","instructions","innerHTML","keyHandler","e","handleKeyPress","addEventListener","generateFood","start","runGame","bind","key","update","head","endGame","some","segment","unshift","pop","Math","floor","random","draw","fillStyle","fillRect","forEach","index","font","fillText","textAlign","setTimeout","tokensEarned","cleanup","removeEventListener"],"sources":["C:/Users/tyler/OneDrive/Desktop/GameHub/src/games/snake.js"],"sourcesContent":["// Fixed Snake Game - No Double Screen Issue\nclass SnakeGame {\n  constructor({ container, onScoreChange, onGameEnd, username }) {\n    this.container = container;\n    this.onScoreChange = onScoreChange;\n    this.onGameEnd = onGameEnd;\n    this.username = username;\n    \n    this.canvas = null;\n    this.ctx = null;\n    this.gameLoop = null;\n    \n    this.gridSize = 20;\n    this.snake = [{ x: 10, y: 10 }];\n    this.direction = { x: 0, y: 0 };\n    this.food = { x: 15, y: 15 };\n    this.score = 0;\n    this.gameRunning = false;\n    \n    this.init();\n  }\n\n  init() {\n    // Create canvas\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = 600;\n    this.canvas.height = 400;\n    this.canvas.style.border = '2px solid #00ff00';\n    this.canvas.style.background = '#001100';\n    this.canvas.style.display = 'block';\n    this.canvas.style.margin = '0 auto';\n    \n    this.ctx = this.canvas.getContext('2d');\n    this.container.appendChild(this.canvas);\n    \n    // Add simple instructions below canvas\n    const instructions = document.createElement('div');\n    instructions.innerHTML = `\n      <div style=\"text-align: center; margin: 20px; color: #00ff00; font-family: Orbitron;\">\n        <h3>üêç RETRO SNAKE üêç</h3>\n        <p>Use ARROW KEYS to move ‚Ä¢ Eat food to grow ‚Ä¢ Don't hit walls or yourself!</p>\n        <p>Score 100+ points to earn 2 tokens!</p>\n      </div>\n    `;\n    \n    this.container.appendChild(instructions);\n    \n    // Set up event listeners\n    this.keyHandler = (e) => this.handleKeyPress(e);\n    document.addEventListener('keydown', this.keyHandler);\n    \n    this.generateFood();\n  }\n\n  start() {\n    // Start the game immediately when called by GamePlayer\n    this.gameRunning = true;\n    this.gameLoop = this.runGame.bind(this);\n    this.gameLoop();\n  }\n\n  handleKeyPress(e) {\n    if (!this.gameRunning) return;\n    \n    if (e.key === 'ArrowUp' && this.direction.y === 0) {\n      this.direction = { x: 0, y: -1 };\n    } else if (e.key === 'ArrowDown' && this.direction.y === 0) {\n      this.direction = { x: 0, y: 1 };\n    } else if (e.key === 'ArrowLeft' && this.direction.x === 0) {\n      this.direction = { x: -1, y: 0 };\n    } else if (e.key === 'ArrowRight' && this.direction.x === 0) {\n      this.direction = { x: 1, y: 0 };\n    }\n  }\n\n  update() {\n    if (!this.gameRunning) return;\n    \n    // Move snake head\n    const head = { ...this.snake[0] };\n    head.x += this.direction.x;\n    head.y += this.direction.y;\n    \n    // Check wall collision\n    if (head.x < 0 || head.x >= this.canvas.width / this.gridSize ||\n        head.y < 0 || head.y >= this.canvas.height / this.gridSize) {\n      this.endGame();\n      return;\n    }\n    \n    // Check self collision\n    if (this.snake.some(segment => segment.x === head.x && segment.y === head.y)) {\n      this.endGame();\n      return;\n    }\n    \n    this.snake.unshift(head);\n    \n    // Check food collision\n    if (head.x === this.food.x && head.y === this.food.y) {\n      this.score += 10;\n      if (this.onScoreChange) {\n        this.onScoreChange(this.score);\n      }\n      this.generateFood();\n    } else {\n      this.snake.pop();\n    }\n  }\n\n  generateFood() {\n    do {\n      this.food = {\n        x: Math.floor(Math.random() * (this.canvas.width / this.gridSize)),\n        y: Math.floor(Math.random() * (this.canvas.height / this.gridSize))\n      };\n    } while (this.snake.some(segment => segment.x === this.food.x && segment.y === this.food.y));\n  }\n\n  draw() {\n    // Clear canvas\n    this.ctx.fillStyle = '#001100';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    \n    // Draw snake\n    this.ctx.fillStyle = '#00ff00';\n    this.snake.forEach((segment, index) => {\n      if (index === 0) {\n        // Snake head - brighter\n        this.ctx.fillStyle = '#00ff88';\n      } else {\n        this.ctx.fillStyle = '#00cc00';\n      }\n      this.ctx.fillRect(\n        segment.x * this.gridSize,\n        segment.y * this.gridSize,\n        this.gridSize - 2,\n        this.gridSize - 2\n      );\n    });\n    \n    // Draw food\n    this.ctx.fillStyle = '#ff0000';\n    this.ctx.fillRect(\n      this.food.x * this.gridSize,\n      this.food.y * this.gridSize,\n      this.gridSize - 2,\n      this.gridSize - 2\n    );\n    \n    // Draw score\n    this.ctx.fillStyle = '#ffffff';\n    this.ctx.font = '20px Orbitron';\n    this.ctx.fillText('Score: ' + this.score, 10, 30);\n    \n    // Draw game over screen\n    if (!this.gameRunning) {\n      this.ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n      this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n      \n      this.ctx.fillStyle = '#ff0000';\n      this.ctx.font = '40px Orbitron';\n      this.ctx.textAlign = 'center';\n      this.ctx.fillText('GAME OVER', this.canvas.width / 2, this.canvas.height / 2 - 40);\n      \n      this.ctx.fillStyle = '#00ff00';\n      this.ctx.font = '20px Orbitron';\n      this.ctx.fillText('Final Score: ' + this.score, this.canvas.width / 2, this.canvas.height / 2);\n      this.ctx.textAlign = 'start';\n    }\n  }\n\n  runGame() {\n    this.update();\n    this.draw();\n    \n    if (this.gameRunning) {\n      setTimeout(() => {\n        this.gameLoop();\n      }, 150); // Game speed\n    }\n  }\n\n  endGame() {\n    this.gameRunning = false;\n    \n    // Calculate tokens earned\n    let tokensEarned = 0;\n    if (this.score >= 100) tokensEarned = 2;\n    else if (this.score >= 50) tokensEarned = 1;\n    \n    setTimeout(() => {\n      if (this.onGameEnd) {\n        this.onGameEnd(this.score, tokensEarned);\n      }\n    }, 3000);\n  }\n\n  cleanup() {\n    this.gameRunning = false;\n    \n    // Remove event listener\n    if (this.keyHandler) {\n      document.removeEventListener('keydown', this.keyHandler);\n    }\n    \n    // Clear container\n    if (this.container) {\n      this.container.innerHTML = '';\n    }\n  }\n}\n\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}